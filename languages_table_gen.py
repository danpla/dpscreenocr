#!/usr/bin/env python3

from operator import itemgetter
import argparse
import json


def make_span(s, class_name):
    return '<span class="{}">{}</span>'.format(class_name, s)


def make_link(url, name):
    return '<a href="{}">{}</a>'.format(url, name)


def make_data_link(repo_name, repo_tag, data_name):
    url = (
        'https://github.com/tesseract-ocr/'
        '{}/raw/{}/{}.traineddata').format(
            repo_name, repo_tag, data_name)
    return make_link(url, data_name)


def write_html_table_row(f, columns, mapping, is_header):
    tag = 't' + ('h' if is_header else 'd')

    s = ''
    for column in columns:
        s += '<{tag}>{}</{tag}>'.format(mapping[column], tag=tag)

    f.write('<tr>')
    f.write(s)
    f.write('</tr>\n')


def make_info(lang_info, repo_name, repo_tag):
    name = '; '.join(lang_info['names'])

    name_infos = lang_info['name_infos']
    if name_infos:
        name += ' ({})'.format(', '.join(name_infos))

    return {
        'name': name,
        'iso_639_3': make_span(lang_info['iso_639_3'], 'iso-code'),
        'iso_639_1': make_span(lang_info['iso_639_1'], 'iso-code'),
        'data_url': make_data_link(
            repo_name, repo_tag, lang_info['data_name']),
    }


def load_infos(fine_path, repo_name, repo_tag):
    infos = []

    with open(fine_path, 'r', encoding='utf-8') as f:
        for lang_info in json.load(f):
            infos.append(make_info(lang_info, repo_name, repo_tag))

    return infos


COLUMN_NAMES = {
    'name': 'Name',
    'iso_639_3': 'ISO 693-3',
    'iso_639_1': 'ISO 693-1',
    'data_url': 'Download',
}


COLUMNS = ('name', 'iso_639_3', 'iso_639_1', 'data_url')
SORT_BY = 'name'


def main():
    parser = argparse.ArgumentParser(
        description='Generate HTML table.')

    parser.add_argument(
        'repo',
        help=(
            'Repository name in NAME:TAG format, e.g. '
            '"tessdata_fast:4.1.0".'))

    parser.add_argument(
        'info_file',
        help='Path to a JSON file generated by gen_info.py.')
    parser.add_argument('out_file', help='Output HTML file.')

    args = parser.parse_args()

    repo_name, repo_tag = args.repo.split(':', 1)

    infos = load_infos(args.info_file, repo_name, repo_tag)
    infos.sort(key=itemgetter(SORT_BY))

    with open(args.out_file, 'w', encoding='utf-8', newline='') as f:
        f.write('<table>\n')

        f.write('<thead>\n')
        write_html_table_row(f, COLUMNS, COLUMN_NAMES, is_header=True)
        f.write('</thead>\n')

        f.write('<tbody>\n')
        for info in infos:
            write_html_table_row(f, COLUMNS, info, is_header=False)
        f.write('</tbody>\n')

        f.write('</table>\n')


if __name__ == '__main__':
    main()
