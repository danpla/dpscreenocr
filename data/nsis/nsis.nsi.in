
!include "FileFunc.nsh"
!include "LogicLib.nsh"
!include "MUI2.nsh"
!include "x64.nsh"

!if @IS_64_BIT_BUILD@
    !define APP_BITNESS 64
!else
    !define APP_BITNESS 32
!endif

!define INSTALLER_FILE "@APP_NAME@-@APP_VERSION@-win${APP_BITNESS}.exe"
!define UNINSTALLER_FILE "Uninstall.exe"

!define UNINSTALL_REG_PATH "Software\Microsoft\Windows\CurrentVersion\Uninstall\@APP_NAME@"

Name "@APP_NAME@ @APP_VERSION@"
OutFile "${INSTALLER_FILE}"

VIProductVersion "@APP_VERSION@.0"
VIAddVersionKey "ProductName" "@APP_NAME@"
VIAddVersionKey "FileVersion" "@APP_VERSION@"
VIAddVersionKey "ProductVersion" "@APP_VERSION@"
VIAddVersionKey "LegalCopyright" "Copyright @APP_COPYRIGHT_YEAR@ @APP_AUTHOR@"
VIAddVersionKey "FileDescription" "@APP_NAME@ installer (${APP_BITNESS}-bit)"
VIAddVersionKey "OriginalFilename" "${INSTALLER_FILE}"

Unicode True
SetCompressor /SOLID lzma
RequestExecutionLevel admin

!define MUI_ICON "@CMAKE_SOURCE_DIR@\data\icons\dpscreenocr.ico"
!define MUI_UNICON "@CMAKE_SOURCE_DIR@\data\icons\dpscreenocr.ico"
!define MUI_WELCOMEFINISHPAGE_BITMAP "@CMAKE_SOURCE_DIR@\data\nsis\win.bmp"
!define MUI_UNWELCOMEFINISHPAGE_BITMAP "@CMAKE_SOURCE_DIR@\data\nsis\win.bmp"

!define MUI_ABORTWARNING

!insertmacro MUI_PAGE_WELCOME
!insertmacro MUI_PAGE_LICENSE "@CMAKE_SOURCE_DIR@\LICENSE.txt"
!insertmacro MUI_PAGE_DIRECTORY

!define MUI_STARTMENUPAGE_DEFAULTFOLDER "@APP_NAME@"
!define MUI_STARTMENUPAGE_REGISTRY_ROOT HKLM
!define MUI_STARTMENUPAGE_REGISTRY_KEY "${UNINSTALL_REG_PATH}"
!define MUI_STARTMENUPAGE_REGISTRY_VALUENAME "NSIS StartMenuFolder"
Var StartMenuFolder
!insertmacro MUI_PAGE_STARTMENU "@APP_NAME@" $StartMenuFolder

!insertmacro MUI_PAGE_INSTFILES

!define MUI_FINISHPAGE_NOREBOOTSUPPORT
!define MUI_FINISHPAGE_NOAUTOCLOSE
!insertmacro MUI_PAGE_FINISH

!insertmacro MUI_UNPAGE_CONFIRM
!insertmacro MUI_UNPAGE_INSTFILES

; First language is the primary one
!insertmacro MUI_LANGUAGE "English"
!include "nsis_language_list.nsh"

; InstallDirRegKey maps to 32-bit view if our setup itself is 32-bit.
; SetRegView does not affect InstallDirRegKey, so we have to read the
; registry manually to initialize $INSTDIR. At the same time, we leave
; InstallDir untouched so that we can detect whether /D is given and
; don't overwrite it.
Function InitInstallDir
    ${If} $INSTDIR != ""
        ; /D is given
        Return
    ${EndIf}

    SetRegView ${APP_BITNESS}
    ReadRegStr $INSTDIR HKLM "${UNINSTALL_REG_PATH}" "InstallLocation"
    ${If} $INSTDIR == ""
        StrCpy $INSTDIR "$PROGRAMFILES${APP_BITNESS}\@APP_NAME@"
    ${EndIf}
FunctionEnd

Function .onInit
    Call InitInstallDir
    SetShellVarContext All
FunctionEnd

Function UninstallExisting
    ReadRegStr $0 HKLM32 "${UNINSTALL_REG_PATH}" "UninstallString"
    ${If} $0 == ""
    ${AndIf} ${RunningX64}
        ReadRegStr $0 HKLM64 "${UNINSTALL_REG_PATH}" "UninstallString"
    ${EndIf}

    ${If} $0 == ""
        Return
    ${EndIf}

    ; Trim quotes. UninstallString generated by older "CPack -G NSIS"
    ; versions don't add them, so check first.
    StrCpy $1 $0 1
    StrCpy $2 $0 1
    ${If} $1 == '"'
    ${AndIf} $2 == '"'
        StrCpy $0 $0 -1 1
    ${EndIf}

    ${IfNot} ${FileExists} $0
        DetailPrint \
            "$\"$0$\" doesn't point to a file or the file doesn't exist"
        Return
    ${EndIf}

    ${GetParent} $0 $1
    ExecWait '"$0" /S _?=$1'
    ${If} ${Errors}
        DetailPrint "Can't execute $\"$0$\" /S _?=$1"
        Return
    ${EndIf}

    ; The below is not actually necessary as we about to install
    ; the new version.
    Delete "$0"
    RMDir "$1"
FunctionEnd

Section "-UninstallExisting"
    Call UninstallExisting
SectionEnd

Section "Install"
    !include "nsis_install_list.nsh"

    SetRegView ${APP_BITNESS}
    WriteRegStr HKLM "${UNINSTALL_REG_PATH}" \
        "DisplayName" "@APP_NAME@"
    WriteRegStr HKLM "${UNINSTALL_REG_PATH}" \
        "DisplayVersion" "@APP_VERSION@"
    WriteRegStr HKLM "${UNINSTALL_REG_PATH}" \
        "Publisher" "@APP_AUTHOR@"
    WriteRegStr HKLM "${UNINSTALL_REG_PATH}" \
        "HelpLink" "@APP_URL@"
    WriteRegStr HKLM "${UNINSTALL_REG_PATH}" \
        "URLInfoAbout" "@APP_URL@"
    WriteRegStr HKLM "${UNINSTALL_REG_PATH}" \
        "DisplayIcon" "$INSTDIR\@APP_FILE_NAME@.exe"
    WriteRegStr HKLM "${UNINSTALL_REG_PATH}" \
        "InstallLocation" "$INSTDIR"
    WriteRegStr HKLM "${UNINSTALL_REG_PATH}" \
        "UninstallString" "$\"$INSTDIR\${UNINSTALLER_FILE}$\""
    WriteRegStr HKLM "${UNINSTALL_REG_PATH}" \
        "QuietUninstallString" "$\"$INSTDIR\${UNINSTALLER_FILE}$\" /S"
    WriteRegDWORD HKLM "${UNINSTALL_REG_PATH}" "NoModify" 1
    WriteRegDWORD HKLM "${UNINSTALL_REG_PATH}" "NoRepair" 1

    SetShellVarContext all
    !insertmacro MUI_STARTMENU_WRITE_BEGIN "@APP_NAME@"
    CreateDirectory "$SMPROGRAMS\$StartMenuFolder"
    CreateShortcut "$SMPROGRAMS\$StartMenuFolder\Documents.lnk" \
        "$INSTDIR\doc\"
    CreateShortcut "$SMPROGRAMS\$StartMenuFolder\@APP_NAME@.lnk" \
        "$INSTDIR\@APP_FILE_NAME@.exe"
    CreateShortcut "$SMPROGRAMS\$StartMenuFolder\Uninstall.lnk" \
        "$INSTDIR\${UNINSTALLER_FILE}"
    !insertmacro MUI_STARTMENU_WRITE_END

    WriteUninstaller "$INSTDIR\${UNINSTALLER_FILE}"

    ${GetSize} "$INSTDIR" "/S=0K" $0 $1 $2
    IntFmt $0 "0x%08X" $0
    WriteRegDWORD HKLM "${UNINSTALL_REG_PATH}" "EstimatedSize" "$0"
SectionEnd

Function un.onInit
    SetShellVarContext All
FunctionEnd

Section "Uninstall"
    !include "nsis_uninstall_list.nsh"
    Delete "$INSTDIR\${UNINSTALLER_FILE}"
    RMDir "$INSTDIR"

    SetRegView ${APP_BITNESS}
    DeleteRegKey HKLM "${UNINSTALL_REG_PATH}"

    !insertmacro MUI_STARTMENU_GETFOLDER "@APP_NAME@" $StartMenuFolder
    Delete "$SMPROGRAMS\$StartMenuFolder\Documents.lnk"
    Delete "$SMPROGRAMS\$StartMenuFolder\@APP_NAME@.lnk"
    Delete "$SMPROGRAMS\$StartMenuFolder\Uninstall.lnk"
    RMDir "$SMPROGRAMS\$StartMenuFolder"
SectionEnd
