Dependencies
============

Required:

  * C++ compiler with C++17 support
  * CMake >= 3.16. A particular version of Qt may require a newer
    version of CMake.
  * Make
  * Qt 5.3.2 - 6. DPSO_QT_VERSION CMake option.
  * libtesseract >= 4.1.0
  * pkg-config to find libtesseract
  * libx11
  * libxext - for X11 Nonrectangular Window Shape Extension

Optional:

  * libintl for translated user interface. On some systems libintl is
    a part of GNU C library and doesn't need to be installed
    separately. DPSO_ENABLE_NLS CMake option.

  * gettext tools >= 0.19 (msgfmt is needed to compile gettext message
    catalogs). DPSO_ENABLE_NLS CMake option.

  * pandoc to generate HTML manual. DPSO_GEN_HTML_MANUAL CMake
    option.

To install dependencies on Debian, Ubuntu, and derivatives, run:

    sudo apt-get install cmake make pkg-config g++ qtbase5-dev \
        libtesseract-dev libx11-dev libxext-dev gettext pandoc


Building
========

You can build dpScreenOCR with the following commands:

    cd path_to_dpscreenocr_source
    mkdir build
    cd build
    cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release ..
    make

You can configure the build with various CMake options; run
"cmake -LH .." to see them all. Options specific to dpScreenOCR have
the "DPSO_" prefix.


Installing
==========

Use "make install" and "make uninstall" to install and remove
dpScreenOCR, respectively. You can set the installation prefix via
CMAKE_INSTALL_PREFIX at the build stage; the default is "/usr/local".

Since version 1.1, dpScreenOCR supports relocation: it loads resources
from paths relative to the location of the executable, rather than
from absolute paths based on the installation prefix. For example, you
can install in "~/dpscreenocr", then move the "dpscreenocr" directory
to a different location, and the program will still work correctly.


Packaging
=========


AppImage
--------

It's recommended to create an AppImage from within a Docker
environment that you can find in the "tools/docker_env" directory. It
uses an old OS distribution to make sure that the resulting AppImage
will work even on legacy systems, and has all the necessary
dependencies configured. Read "tools/docker_env/readme.txt" for the
details.

If you are not using a Docker image, you will need to install
additional dependencies beyond those listed in the "Dependencies"
section above:

  * libcurl >= 7.28. If your system provides several flavors of
    libcurl, it doesn't matter which one to install: dpScreenOCR will
    dynamically load libcurl instead of linking against it, so only
    the headers are needed when building. It usually makes sense to
    use the flavor whose runtime version is already installed: this
    avoids downloading unnecessary transitive dependencies.

  * libjansson >= 2.7

  * linuxdeploy (https://github.com/linuxdeploy/linuxdeploy/releases)
    CMake will search for linuxdeploy in your PATH under the names
    "linuxdeploy" and "linuxdeploy-ARCH.AppImage", where ARCH is the
    output of "uname -m".

On Debian, Ubuntu, and derivatives, you can install libcurl and
libjansson with:

    sudo apt-get install libcurl4-gnutls-dev libjansson-dev

The process of creating an AppImage is now independent of whether you
are inside a Docker image: use the steps described in the "Building"
section above, with two important differences:

  * Disable DPSO_USE_DEFAULT_TESSERACT_DATA_PATH and enable
    DPSO_DYNAMIC_CURL CMake options.

  * Call "make appimage" instead of just "make".
