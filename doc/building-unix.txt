Dependencies
============

To build dpScreenOCR, you need the following tools and development
libraries:

  * C++ compiler with C++11 support
  * CMake 2.8.12 or newer
  * Make
  * Qt (4 or 5)
  * libtesseract
  * libx11
  * libxext - for XShape (X11 Nonrectangular Window Shape Extension)
  * Optionally:
    * pkg-config - to find libtesseract. If not installed, or if you
        have an old OS distributive where libtesseract comes without a
        .pc file for pkg-config, the include directory is assumed to
        be "/usr/include" and the library name is "libtesseract".
    * Qt 5 X11 extras - to fix a bug in Qt 5 < 5.3.2 (see below)
    * libintl - for translated user interface. On some systems libintl
        is a part of GNU C library and doesn't need to be installed
        separately.
    * gettext utilities - msgfmt is needed to compile gettext message
        catalogs.
    * pandoc - to generate HTML manual.

To install dependencies on Debian, Ubuntu, and derivatives, run:

    sudo apt-get install cmake make pkg-config g++ qtbase5-dev \
        libqt5x11extras5-dev libtesseract-dev libx11-dev libxext-dev \
        gettext pandoc


Building
========

In the simplest case, you can build dpScreenOCR with the following
commands:

    cd path_to_dpscreenocr_source
    mkdir build
    cd build
    cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release ..
    make

Along with standard CMake options (like CMAKE_BUILD_TYPE and
CMAKE_INSTALL_PREFIX), there are several options specific to
dpScreenOCR. All such options have "DPSO_" prefix. To list all
options, run:

    cmake -LH ..

Let's look at some of the options in more detail:

  * DPSO_ENABLE_NLS (ON by default) enables native language support
      (translated user interface).

      This option requires gettext runtime library - libintl. On
      systems where libintl is not a part of GNU libc, it has to be
      installed separately.

      The option also requires gettext utilities (namely the msgfmt
      program) to compile gettext catalogs. The MO files will be
      written to the "locale" directory, which will have structure
      expected by libintl.

  * DPSO_QT_LOCAL_DATA (ON by default) allows to load data (like
      localization files for gettext) from the executable's directory.

      On Unix-like systems, where data is installed globally, the
      local data has preference over the global. It therefore makes
      sense to disable this option unless you want to use dpScreenOCR
      without installation.

      Currently, this option does not affect icons, which are either
      embedded in the executable (DPSO_QT_RCC_ICON) or, like all other
      files, are installed globally on Unix-like systems.

  * DPSO_QT_RCC_ICONS (ON by default) specifies whether to embed icons
      in the Qt executable.

      On Unix-like systems, where icons are installed globally like
      all other data files, enabling this option only makes sense if
      you want to use dpScreenOCR without installation, in particular
      because globally installed icons has a preference over the
      embedded ones. Note that this differs from the behavior of the
      DPSO_QT_LOCAL_DATA option, where local data has a preference
      over the global.

  * DPSO_QT_X11_SET_WINDOW_TITLE_WORKAROUND (ON by default) enables
      a workaround for a bug in Qt 5 < 5.3.2. This option requires
      Qt 5 X11 extras.

      As the name implies, the bug affects changing of the main window
      title: it's not updated if you don't interact with the window.
      This is a problem since dpScreenOCR uses the title to show the
      progress to user, which is useful when the window is minimized.

      If your Qt 5 version is >= 5.3.2, this option is ignored, even
      if enabled.

In summary:

  * If you don't need the translated interface (that is, you only need
      English), disable DPSO_ENABLE_NLS.

  * Unless you want to use dpScreenOCR without installation, disable
      both DPSO_QT_LOCAL_DATA and DPSO_QT_RCC_ICONS. Otherwise, see
      "Using uninstalled" section below for more information.


Installing
==========

You can install dpScreenOCR with "make install" or from a DEB package.
The latter is preferable: installing the package will automatically
resolve all dependencies, and you don't need to keep the "build"
directory to remove the program later.

It's also possible to use dpScreenOCR without installation.


Using uninstalled
-----------------

When built with DPSO_QT_LOCAL_DATA and DPSO_QT_RCC_ICONS options
enabled, dpScreenOCR doesn't need installation: you can use the
program by simply running the executable. However, if you want to move
it from the "build" directory to a different location, don't forget to
move the "locale" folder as well, or the interface will only be
available in English. The "locale" directory is only created if the
program was built with DPSO_ENABLE_NLS option enabled.


DEB package
-----------

On Debian, Ubuntu, and derivative systems, you can create a DEB
package with a single command:

    cpack -G DEB

To install the package, double-click it in your file manager or use
gdebi:

    sudo apt-get install gdebi
    sudo gdebi dpscreenocr*.deb

To remove the package:

    sudo apt-get purge dpscreenocr


Make
----

You can install and remove dpScreenOCR using the standard Make
commands "make install" and "make uninstall". To choose the
installation prefix, set the CMAKE_INSTALL_PREFIX at the build stage.
The default prefix is "/usr/local".
