
* We still target Ubuntu 14.04, which comes with GCC 4.8 and CMake
  2.8.12. The code is thus written in C++11 and must actually be
  tested with GCC 4.8, since C++11 support in this version is not
  perfect. Support for CMake 2.8.12 is actually only required on
  Unix-like systems; many Windows-specific CMake files use features
  from version 3.

* Don't use UTF-8 string literals (u8""). Since C++20, their type is
  changed from char to char8_t, breaking the backward compatibility.

  To insert UTF-8 bytes in a string, use 3 digit octal escape
  sequences. Don't use hex sequences, as they consume as much valid
  hex characters as possible. The only exception is when they are
  separated from the rest of the string by literal concatenation:

      "\xC2\xA9" "2018" (gives Â©2018)

* You can implicitly create QStrings from UTF-8 data. Qt 5 uses
  fromUtf8() to convert from const char* and QByteArray. For Qt 4,
  which uses fromAscii(), we have setCodecForCStrings() in main.cpp.

* Tesseract versions before 4.1.0 require "C" locale during OCR,
  forcing gettext to return English. As a workaround, we cache
  translatable strings that are set while OCR is active, and group
  them in structs named DynamicStrings.

* Use underscores instead of hyphens in CMake target names.

* All global configuration macros and CMake options have DPSO_ prefix.
  A CMakeLists file should explicitly set the macro value in
  target_compile_definitions() rather than leaving it undefined; an
  undefined macro may be set to a default value in the source code,
  and that default may not match the CMake option.

* ENABLE_NLS=1 macro should be defined to enable gettext. If you use
  dpso_utils/intl.h, this can be done with DPSO_ENABLE_NLS CMake
  option (enabled by default). If you use your own gettext.h, set
  ENABLE_NLS manually.
