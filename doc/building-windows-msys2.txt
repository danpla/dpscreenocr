Building dpScreenOCR on Windows with MSYS2.

Contents:

  1 Setting up environment
      1.1 MSYS2
      1.2 Dependencies
      1.3 Pandoc
  2 Building
  3 Packaging


1 Setting up environment
========================


1.1 MSYS2
---------

Visit https://www.msys2.org for instructions on how to install and set
up MSYS2.

MSYS2 provides three shells: MSYS shell ("MSYS2 MSYS") and two MinGW
shells for 32 and 64-bit environments ("MSYS2 MinGW 32-bit" and "MSYS2
MinGW 64-bit"). You will never need the MSYS shell; instead, pick a
MinGW shell depending on whether you want to build a 32-bit or 64-bit
version of the program.


1.2 Dependencies
----------------

You will need the following tools and libraries to build dpScreenOCR:

Required:

  * C++ compiler with C++11 support
  * CMake >= 2.8.12. At least 3.17 is recommended for automatic
    copying of DLLs (requires 3.16) and to enable all features of NSIS
    installer (requires 3.17). A particular version of Qt may require
    a newer version of CMake.
  * Make
  * Qt 4 or 5
  * tesseract
  * pkg-config (to find tesseract). Recent MSYS2 uses a compatible
    pkgconf tool.
  * dos2unix

Optional; can be disabled with CMake:

  * libintl (gettext runtime; DPSO_ENABLE_NLS option)
  * gettext tools (msgfmt is needed to compile message catalogs;
    DPSO_ENABLE_NLS option)
  * pandoc (to generate HTML manual; DPSO_GEN_HTML_MANUAL option)

To install all dependencies except Pandoc, run in a MinGW shell:

    pacman -S --needed \
        dos2unix \
        make \
        $MINGW_PACKAGE_PREFIX-cmake \
        $MINGW_PACKAGE_PREFIX-gcc \
        $MINGW_PACKAGE_PREFIX-qt5 \
        $MINGW_PACKAGE_PREFIX-pkgconf \
        $MINGW_PACKAGE_PREFIX-tesseract-ocr \
        $MINGW_PACKAGE_PREFIX-tesseract-data-eng \
        $MINGW_PACKAGE_PREFIX-gettext

Several notes:

  * Tesseact data files don't depend on the architecture, so there is
    no need to install "tesseract-data-eng" and other languages for
    both i686 and x86_64; when building for x86_64, you can use data
    from i686 and vice versa. Alternatively, you can download the
    languages as described in the user manual.

    Still, be aware that CMake will try to copy the English language
    pack installed for the current architecture.

  * In MSYS2, gettext utilities and the runtime library (libintl) come
    in one package.


1.3 Pandoc
----------

MSYS2 does not provide Pandoc, so you have to download it from
https://pandoc.org and make it visible to CMake either by copying
pandoc.exe to the build directory or by extending PATH in a MinGW
shell:

    export PATH="$PATH:path_to_pandoc_dir"


2 Building
==========

You can build dpScreenOCR with the following commands:

    cd path_to_dpscreenocr_source
    mkdir build
    cd build
    cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release ..
    make

You can configure the build with various CMake options; run
"cmake -LH .." to see them all. Options specific to dpScreenOCR have
the "DPSO_" prefix.

DLLs are copied automatically if CMake version is 3.16 or newer. With
older CMake, you have to copy them manually from "$MINGW_PREFIX/bin/".



3 Packaging
===========

To create packages, run "cpack -G <generators>", where <generators>
is a semicolon-separated list of generator names you can find in
"cpack --help". The most useful generators on Windows are:

  * ZIP - ZIP archive.

  * NSIS - EXE installer using NSIS. To install NSIS, run:

        pacman -S --needed $MINGW_PACKAGE_PREFIX-nsis

  * WIX - MSI installer using WIX toolkit. Download WIX from
    https://wixtoolset.org/ and tell CPack the path to its binaries in
    one of the following ways:

      * With the CPACK_WIX_ROOT CPack variable:

            cpack -D CPACK_WIX_ROOT="c:\\WiX Toolset\\bin" ...

      * With the WIX environment variable:

            export WIX="c:\\WiX Toolset\\bin"
            cpack ...

      * By extending the PATH environment variable:

            export PATH="$PATH:/c/WiX Toolset/bin"
            cpack ...

    Note that the first two variants accept paths in both native
    Windows (like "c:\\WiX Toolset\\bin") and Unix-style (like
    "/c/WiX Toolset/bin") formats. For the third option you should
    always use a Unix-style path to avoid the colon after the drive
    letter to be interpreted as a PATH separator.
